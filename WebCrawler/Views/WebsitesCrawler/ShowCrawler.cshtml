@{
    var model = (dynamic)ViewData.Model;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crawler Graph</title>
    <script src="https://cdn.jsdelivr.net/npm/cytoscape@3.22.0/dist/cytoscape.min.js"></script>


    <style>
        #cy {
            width: 100%;
            height: 600px;
            border: 1px solid black;
        }

        .node-info {
            display: none;
            position: absolute;
            padding: 10px;
            background-color: #f0f0f0;
            border: 1px solid #ddd;
            z-index: 1000;
            max-width: 300px;
            word-wrap: break-word;
        }

    </style>
</head>
<body>
    <h1>Crawler Graph</h1>
    <div>
        <label>
            View Mode:
            <select id="view-mode">
                <option value="website">Website View</option>
                <option value="domain">Domain View</option>
            </select>
        </label>
        <label>
            Data Mode:
            <select id="data-mode">
                <option value="static">Static</option>
                <option value="live">Live</option>
            </select>
        </label>
        <label>
            Name Mode (works only for Website Mode):
            <select id="label-selector">
                <option value="title">Title</option>
                <option value="url">URL</option>
            </select>
        </label>

        <label>
            Web Page IDs (comma separated):
            @if (ViewData.Model != null)
            {
                <input type="text" id="web-page-ids" value="@ViewData.Model">
            }
            else
            {
                <input type="text" id="web-page-ids" value="1,2,3,4">
            }

        </label>
        <button id="update-graph">Update Graph</button>
    </div>
    <div id="cy"></div>
    <div id="node-info" class="node-info"></div>
    <script>
        let isChangedLabel = false;
        let isLive = false;
        let intervalId = null;
        let originalWebPageIds = [];

        const viewModeSelect = document.getElementById('view-mode');
        const dataModeSelect = document.getElementById('data-mode');
        const webPageIdsInput = document.getElementById('web-page-ids');
        const updateGraphButton = document.getElementById('update-graph');

        let cy = cytoscape({
            container: document.getElementById('cy'),
            style: [
                {
                    selector: 'node',
                    style: {
                        'background-color': '#666',
                        'label': 'data(title)',         
                        'shape': 'data(shape)'
                    }
                },
                {
                    selector: 'edge',
                    style: {
                        'width': 2,
                        'line-color': '#ccc',
                        'curve-style': 'bezier',
                        'target-arrow-shape': 'triangle',
                        'target-arrow-color': '#ccc'
                    }
                }
            ]
        });

        document.addEventListener('DOMContentLoaded', function () {

            originalWebPageIds = webPageIdsInput.value.split(',').map(id => id.trim()); 

            fetchData();

            viewModeSelect.addEventListener('change', changeViewMode);
            dataModeSelect.addEventListener('change', toggleDataMode);
            updateGraphButton.addEventListener('click', fetchData);

            function changeViewMode() {
                cy.elements().remove();

                if (viewModeSelect.value === 'domain') {
                    cy.style().selector('node').style('label', 'data(label)').update();
                } else if (viewModeSelect.value === 'website') {
                    cy.style().selector('node').style('label', 'data(title)').update();
                    
                    const nameModeSelect = document.getElementById('label-selector');
                    nameModeSelect.value = 'title';
                }

                fetchData();



            }

            function checkWebPageIdsChange() {
                const currentWebPageIds = webPageIdsInput.value.split(',').map(id => id.trim());
                const hasIdBeenRemoved = originalWebPageIds.some(id => !currentWebPageIds.includes(id));

                if (hasIdBeenRemoved || originalWebPageIds.length === 0) {
    
                    cy.elements().remove();

                } 
                
                originalWebPageIds = webPageIdsInput.value.split(',').map(id => id.trim()).filter(id => id.length > 0);


            }

            function toggleDataMode() {

                const selectedMode = dataModeSelect.value;
                isLive = selectedMode === 'live';

                if (isLive) {
                    intervalId = setInterval(fetchData, 5000); // Fetch data every 5 seconds
                } else {
                    clearInterval(intervalId);
                }
            }

            function fetchData() {

                checkNodeLabelsChange();
                checkWebPageIdsChange();

                const webPageIds = webPageIdsInput.value.split(',').map(id => id.trim()).join(',');

                fetch(`../../graphql?query=query { nodes(webPages: [${webPageIds}]) { title crawlTime url links { url } owner { active identifier regexp url } } }`)
                    .then(response => response.json())
                    .then(data => {
                        const newElements = convertJsonToCytoscapeElements(data, viewModeSelect.value);

                        cy.nodes().lock();

                        const filteredElements = newElements.filter(element => {
                            if (element.data.source && element.data.target) {
                                const source = element.data.source;
                                const target = element.data.target;
                                return cy.edges(`[source = "${source}"][target = "${target}"]`).length === 0;
                            } else if (element.data.id) {
                                const nodeExists = cy.getElementById(element.data.id).length > 0;
                                return !nodeExists;
                            }
                            return false;
                        });

                        cy.add(filteredElements);


                        cy.layout({
                            name: 'grid',
                            fit: false,
                            avoidOverlapPadding: 500
                        }).run();

                        cy.nodes().unlock();

                        cy.on('dblclick', 'node', function (event) {
                            const node = event.target;
                            const nodeInfo = document.getElementById('node-info');
                            const position = node.renderedPosition();

                            let innerHtmlDetail;


                            if (viewModeSelect.value === "website") {

                                if (node.data('crawled') === true) {
                                    innerHtmlDetail = `
                                                    URL: ${node.data('id')}<br>
                                                    Crawl Time: ${node.data('crawlTime')}<br>
                                                    ID Website Record: ${node.data('owner').identifier}<br>
                                                    <button id="create-execution">Create new execution</button>
                                                    `;
                                } else {
                                    innerHtmlDetail = `
                                                    URL: ${node.data('id')}<br>
                                                    <button id="create-execution">Create new Crawler and new execution</button>
                                                    `;
                                }

                            } else if (viewModeSelect.value === "domain") {
                                if (node.data('crawled') === true) {
                                    innerHtmlDetail = `
                                                    URL: ${node.data('id')}<br>
                                                    Total Crawl Time: ${node.data('crawlTime')}<br>
                                                    List of ID Website Records: [ ${node.data('websiteRecords')} ]<br>
                                                    <input type="text" id="single-number" pattern="\d" title="Selected Website ID" required>
                                                    <button id="create-execution">Create new execution</button>
                                                    `;
                                } else {
                                    innerHtmlDetail = `
                                                    URL: ${node.data('id')}<br>
                                                    <button id="create-execution">Create new Crawler and new execution</button>
                                                    `;
                                }      
                            }

                            nodeInfo.innerHTML = innerHtmlDetail;

                            if (viewModeSelect.value === "website") {

                                document.getElementById('create-execution').addEventListener('click', function () {
                                    createExecution(node.data('id'), node.data('owner').regexp, node.data('crawled'), node.data('owner').identifier);
                                });

                            } else if (viewModeSelect.value === "domain") {

                                document.getElementById('create-execution').addEventListener('click', function () {

                                    const selectedID = document.getElementById('single-number').value;
                                    createExecution(node.data('id'), node.data('websiteRecords'), node.data('crawled'), selectedID);
                                });
                            }

                            nodeInfo.style.left = `${position.x + 10}px`;
                            nodeInfo.style.top = `${position.y + 10}px`;
                            nodeInfo.style.display = 'block';

                            
                        });

                        cy.on('pan', function () {
                            document.getElementById('node-info').style.display = 'none';
                        });

                        document.addEventListener('click', function (event) {
                            const nodeInfo = document.getElementById('node-info');
                            if (!event.target.closest('#node-info') && !event.target.closest('#cy')) {
                                nodeInfo.style.display = 'none';
                            }
                        });
                    })
                    .catch(error => console.error('Error fetching or processing data:', error));
            }

            function createExecution(nodeUrl, boundary, isCrawled, websiteId) {

                const apiUrl = `${window.location.origin}/api/Records`;

                if (isCrawled === false) {
                    const data = {
                        Url: `${nodeUrl}`,
                        BoundaryRegExp: `${boundary}`,
                        Days: 0,
                        Hours: 0,
                        Minutes: 0,
                        Label: `${nodeUrl}`,
                        IsActive: false,
                        Tags: ``
                    };

                    fetch(apiUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data)
                    })
                        .then(response => response.json())
                        .then(result => {


                            alert('Execution created successfully!');

                            const webPageIdsInput = document.getElementById('web-page-ids');
                            const currentIds = webPageIdsInput.value.split(',').map(id => id.trim());

                            currentIds.push(result);
                            webPageIdsInput.value = currentIds.join(',');

                            const dataModeSelect = document.getElementById('data-mode');
                            dataModeSelect.value = 'live';
                            const selectedMode = dataModeSelect.value;
                            isLive = selectedMode === 'live';

                            fetchData();



                        })
                        .catch(error => {
                            console.error('Error creating execution:', error);
                            alert('Failed to create execution.');
                        });
                } else {

                    const apiUrl = `${window.location.origin}/api/RestartRecord/${websiteId}`;

                    const requestBody = JSON.stringify({ id: websiteId });

                    if (viewModeSelect.value === "website") {

                        fetch(apiUrl, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: requestBody
                        })
                            .then(result => {
                                alert('Execution created successfully!');

                                const dataModeSelect = document.getElementById('data-mode');
                                dataModeSelect.value = 'live';
                                const selectedMode = dataModeSelect.value;
                                isLive = selectedMode === 'live';

                            })
                            .catch(error => {
                                console.error('Error creating new execution for existing record:', error);
                                alert('Failed to create execution.');
                            });

                    } else if (viewModeSelect.value === "domain") {

                        if (boundary.includes(websiteId)) {
                            fetch(apiUrl, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: requestBody
                            })
                                .then(result => {
                                    alert('Execution created successfully!');

                                    isLive = true;
                                    const dataModeSelect = document.getElementById('data-mode');
                                    const selectedMode = dataModeSelect.value;
                                    isLive = selectedMode === 'live';
                                })
                                .catch(error => {
                                    console.error('Error creating new execution for existing record:', error);
                                    alert('Failed to create execution.');
                                });
                        }
                    }
                }
            }


            function convertJsonToCytoscapeElements(data, viewMode) {
                const nodes = [];
                const nodeUrls = new Set();

                if (viewMode === 'website') {
                    data.data.nodes.forEach(node => {
                        const shape = determineNodeShape(node);
                        
                        let isCrawled;

                        if (node.crawlTime.length === 0) {
                            isCrawled = false;
                        } else {
                            isCrawled = true;
                        }

                        nodes.push({
                            data: {
                                id: node.url,
                                title: node.title,
                                label: node.url,
                                shape: shape,
                                crawlTime: node.crawlTime,
                                owner: node.owner,
                                crawled: isCrawled
                            }
                        });
                        nodeUrls.add(node.url);
                    });
                } else if (viewMode === 'domain') {
                    const domainMap = new Map();

                    data.data.nodes.forEach(node => {
                        
                        const domain = getDomainFromUrl(node.url);
                     
                        if (!domainMap.has(domain)) {
                            domainMap.set(domain, {
                                id: domain,
                                label: domain,
                                shape: 'ellipse',
                                crawlTime: "",
                                websiteRecords: new Set(),
                                crawled: false
                            });
                        }


                        let isCrawled = false;

                        if (node.crawlTime.length !== 0) {
                            domainMap.get(domain).crawled = true;
                        } 


                        domainMap.get(domain).crawlTime = domainMap.get(domain).crawlTime + " " + node.crawlTime;
                        domainMap.get(domain).websiteRecords.add(node.owner.identifier);
                        nodeUrls.add(domain);
                    });


                    domainMap.forEach(domainNode => {
                        nodes.push({
                            data: {
                                id: domainNode.id,
                                label: domainNode.label,
                                shape: domainNode.shape,
                                crawlTime: domainNode.crawlTime,
                                websiteRecords: Array.from(domainNode.websiteRecords),
                                crawled: domainNode.crawled
                            }
                        });

                    });
                }

                let edges = [];

                if (viewMode === 'website') {

                    edges = data.data.nodes.flatMap(node =>
                        node.links
                            .filter(neighbour => nodeUrls.has(neighbour.url))
                            .map(neighbour => ({
                                data: {
                                    source: node.url,
                                    target: neighbour.url
                                }
                            }))
                    );
                } else if (viewMode === 'domain') {


                    // Tohle dela sjednoceni domen!!!! 
                    const unifiedNodes = data.data.nodes.reduce((acc, node) => {
                        const nodeUrl = getDomainFromUrl(node.url);
                        const links = node.links.map(link => getDomainFromUrl(link.url));

                        if (!acc[nodeUrl]) {
                            acc[nodeUrl] = new Set(links);
                        } else {
                            links.forEach(link => acc[nodeUrl].add(link));
                        }

                        return acc;
                    }, {});

                    const newNodes = Object.keys(unifiedNodes).map(nodeUrl => ({
                        data: {
                            nodeUrl,
                            links: Array.from(unifiedNodes[nodeUrl])
                        }
                    }));

                    // Nastavuje hrany domen... 
                    edges = newNodes.flatMap(node =>
                        node.data.links
                            .filter(link => nodeUrls.has(link))
                            .map(link => ({
                                data: {
                                    source: node.data.nodeUrl,
                                    target: link
                                }
                            }))
                    );

                }
                
              
                return [...nodes, ...edges];
            }

            function determineNodeShape(node) {
                if (node.url === node.owner.url) {
                    return 'diamond';
                } else if (node.owner.regexp === getDomainFromUrl(node.url)) {
                    return 'rectangle';
                } else {
                    return 'ellipse';
                }
            }

            function getDomainFromUrl(url) {
                const urlObj = new URL(url);
                return urlObj.hostname;
            }

            function checkNodeLabelsChange() {

                if (viewModeSelect.value !== 'website') {
                    return;
                } 

                if (isChangedLabel === false) {
                    return;
                }

                isChangedLabel = false;

                let selectedLabel = document.getElementById('label-selector').value;

                
                cy.nodes().forEach(function (node) {

                    if (selectedLabel === 'title') {
                        cy.style().selector('node').style('label', 'data(title)').update();


                    } else if (selectedLabel === 'url') {
                        cy.style().selector('node').style('label', 'data(label)').update();
                    }
                });

            }

            function changeModeName() {
                isChangedLabel = true;           
            }


            document.getElementById('label-selector').addEventListener('change', function () {
                changeModeName();
                checkNodeLabelsChange();
            });
        });
    </script>
    <script>
        history.replaceState(null, '', '/WebsitesCrawler/ShowCrawler');
    </script>
</body>
</html>
