@model List<WebCrawler.Models.WebsiteRecordModel>
@{
	ViewData["Title"] = "Crawler List";
}



<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Crawler List</title>

	<style>


		#crawler-list {
			height: 500px;
		}


		.table-like {
			list-style: none;
			padding: 0;
			margin: 0;
			border-collapse: collapse;
			width: 100%;
		}

		.table-like .header {
			font-weight: bold;
			background-color: #f4f4f4;
		}

		.cell {
			height: 40px;
		}

		.cell, .operation {
			display: flex;
			justify-content: center;
			align-items: center;
		}

		.operation a {
			margin-left: 10px;
			margin-right: 10px;
		}

		.table-like li {
			display: flex;
		}

		.table-like .cell {
			flex: 1;
			justify-content: center;
			align-items: center;
		}

		#pagination {
			display: flex;
			justify-content: center;
			align-items: center;
		}


		button {
			width: 100px;
			height: 50px;
			justify-content: center;
			align-items: center;
		}

		#count-page {
			margin-left: 50px;
			margin-right: 50px;
		}

		#search-bar-input {
			width: 100%;
		}

	</style>
</head>
<body>
	<div>

		<div>
			<input type="text" id="search-bar-input" onkeyup="searchFunction()" placeholder="Search for labels, urls, tags..">
		</div>
		<div>
			<hr>
		</div>
		<div>
			<label>Sort by:</label>
			<select id="sort-order" onchange="searchFunction()">
				<option value="None">None</option>
				<option value="Url">URL</option>
				<option value="LastExecutionTime">Last Execution Time</option>
			</select>
		</div>
		<div>
			<hr>
		</div>

		<div>
			<ul class="table-like">
				<li class="header">
					<div class="cell">
						Id
					</div>
					<div class="cell">
						Label
					</div>
					<div class="cell">
						Url
					</div>
					<div class="cell">
						Last Change
					</div>
					<div class="cell">
						Periodicity
					</div>
					<div class="cell">
						Status
					</div>
					<div class="cell">
						Tags
					</div>
					<div class="cell">
						Operation
					</div>
				</li>
			</ul>
			<ul class="table-like" id="crawler-list">

				@foreach (var crawler in Model)
				{
					var period = "";
					if (crawler.Days > 0) period += $"{crawler.Days}d ";
					if (crawler.Hours > 0) period += $"{crawler.Hours}h ";
					if (crawler.Minutes > 0) period += $"{crawler.Minutes}m";

					<li class="crawler" id="@crawler.Id" style="display: hidden;">

						<div class="cell">
							<span>@crawler.Id</span>
						</div>

						<div class="cell">
							<span>@crawler.Label</span>
						</div>

						<div class="cell">
							<span>@crawler.Url</span>
						</div>

						<div class="cell">
							<span>@crawler.LastExecution</span>
						</div>

						<div class="cell">
							<span>@period</span>
						</div>

						<div class="cell">
							<span>@crawler.LastStatus</span>
						</div>


						<div class="cell">
							@{
								TagsData tagsData = new TagsData();
								tagsData.AddTags(crawler.Tags);
								var tags = tagsData.GetAllTags();
								foreach (var tag in tags)
								{
												<span class="tag">@Html.Raw(tag.Key)</span>
								}
							}
						</div>

						<div class="cell operation">
							<a href="@Url.Action("ShowCrawler", "WebsitesCrawler", new { id = crawler.Id })">Show</a>

							<a href="@Url.Action("CreateEditCrawler", "WebsitesCrawler", new { id = crawler.Id })">Edit</a>

							<a href="" onclick="deleteRecord(@crawler.Id)">Delete</a>
						</div>
					</li>
				}
			</ul>
		</div>


		<div>
			<hr>
		</div>
		<div id="pagination">
			<div id="page-left">
				<div>
					<button id="prev-page" onclick="prevPage()">Previous</button>
				</div>

			</div>
			<div id="page-center">
				<span id="count-page"></span>
			</div>
			<div id="page-right">
				<div>
					<button id="next-page" onclick="nextPage()">Next</button>
				</div>
			</div>

		</div>

	</div>

	<script>

		let order = "None";
		let start = 0;
		let end = 9;
		const inc = end + 1;

		filterAndShow();
		getPageNum();

		function nextPage() {
			start += inc;
			end += inc;
			filterAndShow();
			getPageNum();
		}

		function prevPage() {
			start -= inc;
			end -= inc;
			filterAndShow();
			getPageNum();
		}

		function filterAndShow() {
			let input = document.getElementById('search-bar-input').value.toUpperCase();
			let pieces = input.split(' ');
			pieces = pieces.map(piece => piece.trim());

			const order = document.getElementById('sort-order').value;
			const list = document.getElementById('crawler-list');
			const crawlers = Array.from(list.getElementsByClassName('crawler'));
			let numOfCrawlers = crawlers.length;
			let filteredCrawlers = [];
			let currentPage = Math.floor(start / (end - start + 1)) + 1;

			if (order === "Url") {
				crawlers.sort((a, b) => {
					let urlA = a.getElementsByTagName("span")[2]?.textContent || "";
					let urlB = b.getElementsByTagName("span")[2]?.textContent || "";
					return urlA.localeCompare(urlB);
				});
			} else if (order === "LastExecutionTime") {
				crawlers.sort((a, b) => {
					
					let timeA = a.getElementsByTagName("span")[3]?.textContent || "";
					let timeB = b.getElementsByTagName("span")[3]?.textContent || "";

					let dateA = new Date(timeA);
					let dateB = new Date(timeB);

					return dateA - dateB;
				});
			} else {
				crawlers.sort((a, b) => {
					let Id1 = parseInt(a.getElementsByTagName("span")[0]?.textContent) || 0;
					let Id2 = parseInt(b.getElementsByTagName("span")[0]?.textContent) || 0;

					return Id1 - Id2;
				});
			}

			while (list.firstChild) {
				list.removeChild(list.firstChild);
			}

			crawlers.forEach(crawler => {
				list.appendChild(crawler);
			});
			

			for (let i = 0; i < numOfCrawlers; i++) {
				crawlers[i].style.display = "none";

				let allPiecesMatch = true;

				let crawlerLabel = crawlers[i].getElementsByTagName("span")[1]?.textContent || crawlers[i].getElementsByTagName("p")[0]?.innerText || "";
				let crawlerUrl = crawlers[i].getElementsByTagName("span")[2]?.textContent || crawlers[i].getElementsByTagName("p")[1]?.innerText || "";
				let tagElements = crawlers[i].querySelectorAll(".tag");
				
				if (input.length !== 0) {
					pieces.forEach(piece => {

						let pieceInText = crawlerLabel.toUpperCase().indexOf(piece.toUpperCase()) > -1;

						let pieceInUrl = crawlerUrl.toUpperCase().indexOf(piece.toUpperCase()) > -1;


						let pieceInTags = Array.from(tagElements).some(tagElement => {
							let tagText = tagElement.textContent || tagElement.innerText || "";
							return tagText.toUpperCase().indexOf(piece.toUpperCase()) > -1;
						});

						if (!pieceInText && !pieceInUrl && !pieceInTags) {
							allPiecesMatch = false;
							return;
						}
					});
				}
				
				if (allPiecesMatch === true) {
					filteredCrawlers.push(crawlers[i]);
				}
			}

			let filteredNumOfCrawlers = filteredCrawlers.length;

			for (let i = 0; i < filteredNumOfCrawlers; i++) {
				if (i >= start && i <= end) {
					filteredCrawlers[i].style.display = "flex";
				} else {
					filteredCrawlers[i].style.display = "none";
				}
			}

			if (start > 0) {
				document.getElementById("prev-page").style.visibility = "visible";
			} else {
				document.getElementById("prev-page").style.visibility = "hidden";
			}

			if (end < (filteredNumOfCrawlers - 1)) {
				document.getElementById("next-page").style.visibility = "visible";
			} else {
				document.getElementById("next-page").style.visibility = "hidden";
			}
		}

		function getPageNum() {
			document.getElementById("count-page").innerText = ("page count: ") + ((start + inc) / inc);
		}

		function searchFunction() {
			start = 0;
			end = 9;
			filterAndShow();
			getPageNum();
		}

		function deleteRecord(id) {
			event.preventDefault();

			fetch(`/WebsitesCrawler/DeleteCrawler?id=${id}`, {
				method: 'DELETE'
			})
				.then(response => {
					if (!response.ok) {
						throw new Error("Couldn't remove crawler");
					}

					let crawler = document.querySelector(`.crawler-${id}`) || document.getElementById(id);
					if (crawler) {
						crawler.parentNode.removeChild(crawler);
						if (start >= document.querySelectorAll(".crawler").length && (end - inc) > 0) {
							start -= inc;
							end -= inc;
						}
						filterAndShow();
						getPageNum();
					} else {
						throw new Error("Crawler doesn't exist");
					}
				})
				.catch(error => {
					alert(error.message);
				});
		}

	</script>
</body>
</html>
